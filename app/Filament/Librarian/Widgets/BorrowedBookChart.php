<?php

namespace App\Filament\Librarian\Widgets;

use App\Models\BorrowedBook;
use Carbon\Carbon;
use Filament\Widgets\ChartWidget;
use Flowframe\Trend\Trend;

class BorrowedBookChart extends ChartWidget
{
    protected static ?string $heading = 'Borrowed Books Chart';

    protected int | string | array $columnSpan = 4;

    protected static ?int $sort = 2;

    public ?string $filter = 'year';

    protected function getMaxHeight(): ?string
    {
        return "400px"; // TODO: Change the autogenerated stub
    }

    protected function getFilters(): ?array
    {
        return [
            'year'  => 'This year',
            'month' => 'Last month',
            'week'  => 'Last week',
        ];
    }
    protected function getData(): array
    {
        $activeFilter = $this->filter;

        if ($activeFilter === 'year') {
            $rangeStart = now()->startOfYear();
            $rangeEnd = now()->endOfYear();
            $interval = 'perMonth';
            $labelFormatter = fn ($item) => Carbon::parse($item->date)->translatedFormat('M');
        } elseif ($activeFilter === 'month') {
            $rangeStart = now()->startOfMonth();
            $rangeEnd = now()->endOfMonth();
            $interval = 'perWeek';
            $labelFormatter = function ($item) {
                [$year, $week] = explode('-', $item->date);
                return Carbon::now()->setISODate($year, $week, 1)->translatedFormat('d M');
            };
        } elseif ($activeFilter === 'week') {
            $rangeStart = now()->subDays(6)->startOfDay();
            $rangeEnd = now()->endOfDay();
            $interval = 'perDay';
            $labelFormatter = fn ($item) => Carbon::parse($item->date)->translatedFormat('d M');
        } else {
            return [
                'datasets' => [],
                'labels' => [],
            ];
        }

        $borrowedData =Trend::query(
            BorrowedBook::query()
                ->where('library_id', auth()->user()->library_id)
        )
            ->dateColumn('borrowed_date')
            ->between(start: $rangeStart, end: $rangeEnd)
            ->{$interval}()
            ->count();

        $penaltyData = Trend::query(
            BorrowedBook::query()
                ->where('status', 'penalty')
                ->where('library_id', auth()->user()->library_id)
        )
            ->dateColumn('borrowed_date')
            ->between(start: $rangeStart, end: $rangeEnd)
            ->{$interval}()
            ->count();

        return [
            'datasets' => [
                [
                    'label' => 'Borrowed Books',
                    'data' => $borrowedData->map(fn ($item) => $item->aggregate)->toArray(),
                    'backgroundColor' => 'rgba(102, 120, 195, 1)',
                    'borderColor' => 'rgba(102, 120, 195, 1)',
                    'borderRadius' => 50,
                ],
                [
                    'label' => 'Penalty',
                    'data' => $penaltyData->map(fn ($item) => $item->aggregate)->toArray(),
                    'backgroundColor' => 'rgba(255, 99, 132, 0.8)', // Red
                    'borderColor' => 'rgba(255, 99, 132, 1)',
                    'borderRadius' => 50,
                ],
            ],
            'labels' => $borrowedData->map($labelFormatter)->toArray(),
        ];
    }

    protected function getType(): string
    {
        return 'bar';
    }
}
